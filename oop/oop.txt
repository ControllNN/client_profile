Принципы ООП

Полиморфизм.
Созданная  функция должна решать свою задачу для разных типов данных, абстрагируясь от них. Такие функции повышают возможность повторного использования кода.

Инкапсуляция.
Данное свойство необходимо нам для сокрытия  «деталей» работы нашего приложения  от пользователя и разделения интерфейса  на 2 типа - внутренний и внешний.
При создании конструктора  мы будем использовать несколько методов и свойств , часть из которых сделаем приватными  , а пользователю через внешний интерфейс будут доступны лишь публичные . 
Локальные переменные и параметры конструктора  не доступны снаружи и это хорошо, но при необходимости к  ним можно получить доступ изнутри.
Сокрытие приватных методов и свойств убережет  пользователя от неизвестных последствий и программу от возможного краха . Так же в будущем удобно редактировать приватные методы и свойства без изменения внешнего интерфейса.



Наследование.

При создании классов, мы создаем основной класс  с «базовыми» свойствами и методами, которые нам понадобятся. Далее, при создании новых классов мы  уже будем наследоваться от основного, добавляя и изменяя его  параметры и получим уникальный объект.
Такой принцип позволит нам повторно использовать ранее написанный код.

Абстракция.
При создании «базового» класса , мы выделаем  только нужные(важные) свойства , исключая незначительные. 



